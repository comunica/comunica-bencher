#!/bin/bash
# Generate diefficiency statistics

print_usage () {
    echo "Usage: comunica-bencher dief <time> experimentpath1 [experimentpath2 [...]]"
    echo "  time       Caclulate dief t based on the intermediate time results of the given queries."
    exit 1
}

dief () {
    for experiment in $@; do
        # Check if the experiment contains the correct query output
        if [ ! -f $experiment/output/queries.csv ]; then
            echo "No output/queries.csv file could be found in the experiment '$experiment'."
            exit 1
        fi
        if ! head -n 1 $experiment/output/queries.csv | grep -q timestamps ; then
            echo "No timestamps found in output/queries.csv for experiment '$experiment'."
            exit 1
        fi
        args[((i++))]=$experiment/output/queries.csv
    done

    awk -F ';' '
    FNR > 1 {
      {
          time[$1,$2] = (time[$1,$2] > 0 && time[$1,$2] < $4 ? time[$1,$2] : $4);
      }
      {
          n=split($5,timestamps," ");
          prev = 0;
          dief[FILENAME,$1,$2] = 0;
          # calculate integral of graph generated by timestamps
          for (i = 1; i <= n && timestamps[i] <= time[$1,$2]; i++) {
              dief[FILENAME,$1,$2] += (timestamps[i]-prev) * (i-1);
              prev = timestamps[i];
          }
          dief[FILENAME,$1,$2] += (time[$1,$2]-prev) * n;
          
          name = FILENAME;
          gsub(/\/output\/queries.csv/, "", name);

          combination_count[name";"$1] += 1;
          combination_sum[name";"$1] += dief[FILENAME,$1,$2];
          
          combinations[name] = true;
      }
    }
    END {
        # Calculate averages and max values for scaling to [0,1] range
        for (key in combination_sum) {
            average_combination = combination_sum[key] / combination_count[key]

            split(key,split_key,";");
            query = split_key[2]
            queries[query] = true;
            
            query_combinations[key] = average_combination
            queries_max[query] = (queries_max[query] > 0 && queries_max[query] < average_combination ? queries_max[query] : average_combination);
        }
        
        # Print header
        printf "query"
        for (combination in combinations) {
            printf ";" combination
        }
        printf "\n"

        # Print values
        for (query in queries) {
            printf query
            for (combination in combinations) {
                key = combination ";" query;
                printf ";" (query_combinations[key] > 0 ? queries_max[query] / query_combinations[key] : 0)
            }
            printf "\n"
        }
    }' ${args[@]} | awk 'NR == 1; NR > 1 {print $0 | "sort -n"}'
}

# Validate input args
if [[ $# -lt 1 ]] ; then
    echo "Error: Missing dief action"
    print_usage
fi

# Execute action
action=$1
remainingargs=${@:2}
case "$action" in
time)
    dief $remainingargs
    ;;
*)
    echo "Invalid dief action '$action'"
    print_usage
    ;;
esac